buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.10'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id "io.sentry.jvm.gradle" version "3.11.0"
    id 'checkstyle'
}

group = 'com.universe'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

tasks.withType(Checkstyle) {
    reports {
        xml.required = true
    }
}

checkstyle {
    configFile = file("checkstyle/naver-checkstyle-rules.xml")
    configProperties = ["suppressionFile": "checkstyle/naver-checkstyle-suppressions.xml"]
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation 'org.springframework.boot:spring-boot-starter-security'

    //implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // sentry dependency
    implementation 'io.sentry:sentry-spring-boot-starter:6.23.0'
    implementation 'io.sentry:sentry-logback:6.23.0'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    //runtimeOnly 'com.mysql:mysql-connector-j'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    //JWT
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.register("copyConfig", Copy) {
    from('./uni-config')
    include('src/**/*.yml')
    into('.')
    eachFile { file ->
        println "> copy file: ${file.sourcePath}"
    }
}

copy {
    from('./uni-config')
    include('src/**/sentry.yml')
    into('.')
    eachFile { file ->
        println "> copy file: ${file.sourcePath}"
    }
}

def sentryProperties = new Properties()
file("src/main/resources/sentry.yml").withInputStream { sentryProperties.load(it) }


sentry {
    includeSourceContext = true

    org = "uni-universe"
    projectName = "java-spring-boot"
    authToken = sentryProperties.getProperty("sentry-auth-token")
}
